{"version":3,"sources":["components/Expenses/ExpenseDate.js","components/UI/Card.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesFilter.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["ExpenseDate","props","month","date","toLocaleString","day","year","getFullYear","_jsxs","className","children","_jsx","Card","classes","ExpenseItem","title","amount","ExpensesFilter","value","selected","onChange","event","onChangeFilter","target","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","map","dataPoint","totalMaximum","max","apply","_toConsumableArray","ExpensesChart","_step","chartDataPoints","_iterator","_createForOfIteratorHelper","expenses","s","n","done","expense","getMonth","err","e","f","Expenses","_useState","useState","_useState2","_slicedToArray","filteredYear","setFilteredYear","filteredExpenses","allexpenses","filter","toString","selectedYear","length","id","NewExpense","isEditing","setIsEditing","_useState3","_useState4","enteredTitle","setEnteredTitle","_useState5","_useState6","enteredAmount","setEnteredAmount","_useState7","_useState8","enteredDate","setEnteredDate","stopEditingHandler","onClick","onSubmit","preventDefault","expenseData","Date","random","console","log","onAddExpense","onCancel","htmlFor","type","min","step","Dummy_Expenses","App","setExpenses","prevExpenses","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.018f51fe.chunk.js","sourcesContent":["import \"./ExpenseDate.css\";\n\nfunction ExpenseDate(props) {\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\n  const year = props.date.getFullYear();\n\n  return (\n    <div className=\"expense-date\">\n      <div className=\"expense-date__month\">{month}</div>\n      <div className=\"expense-date__year\">{year}</div>\n      <div className=\"expense-date__day\">{day}</div>\n    </div>\n  );\n}\nexport default ExpenseDate;\n","import \"./Card.css\";\n\nfunction Card(props) {\n  const classes = \"card \" + props.className;\n  return <div className={classes}>{props.children}</div>;\n}\nexport default Card;\n\n// initially css classname styles became missing on Card compo- expense-item has to be configured within custom components e.g Card compo using list of classnames in the const which is now set on the div of this Card compo.\n\n\n// ExpenseItem and Expenses container div have shared styles- box shadow + border radius- put them in new Card.css re-usable Card component\n// Cant just immediately use custom components as wrappers around other jsx content\n// Inject jsx content into a Component-\n// Initially Card component swallows entire jsx content inside it- Doesnt know what to do with wrapped content\n// Solution- Special Children prop by passing content between open close tags- content then exposed under special prop inside actual wrapping component. Children prop holds content between open close tags.\n","import ExpenseDate from \"./ExpenseDate\";\nimport \"./ExpenseItem.css\";\nimport Card from \"../UI/Card\";\n\nfunction ExpenseItem(props) {\n\n  return (\n    <Card className=\"expense-item\">\n      <ExpenseDate date={props.date} />\n      <div className=\"expense-item__description\">\n        <h2>{props.title}</h2>\n        <div className=\"expense-item__price\">${props.amount}</div>\n      </div>\n    </Card>\n  );\n}\n\nexport default ExpenseItem;\n\n// See Card.js notes\n\n// initially css classname styles became missing on Card compo- expense-item has to be configured within custom components e.g Card compo.\n// Good function naming convention- if function triggered upon event call them \"..Handler\" a function attached to an event listener\n\n// React goes through all components (executes the functions) and evaluates them into DOM instructions to render onto screen.\n// The problem with this is React evaluates everything once, when the app is initially rendered.\n// In modern apps typically want to update elements on screen e.g when button clicked- need a way of telling react something changed and to re-evaluate certain components => State\n\n// Import { useState } in curly brackets- useState is a function\n// useState() returns an array of 2 elements- current value AND Updating function\n// Using useState--> Call it in Component function before jsx return statement--> function() { useState(); return } ;\n// useState wants a default initial state value--> creates \"special variable\" where changes leads to component re-evalution.\n// useState is a Hook- All Hooks start with \"use\"\n\n// If there is data that changes and should be reflected in UI- Need to use State\n\n// useState(initial value)\n// |\n// |\n// v\n// const [variable current state, updating function] = useState(initial value)\n// Array destructuring technique above stores both elements in separate variables\n\n// State is separated on a per component instance basis","import \"./ExpensesFilter.css\";\n\nfunction ExpensesFilter(props) {\n  function dropdownChangeHandler(event) {\n    props.onChangeFilter(event.target.value);\n  }\n\n  return (\n    <div className=\"expenses-filter\">\n      <div className=\"expenses-filter__control\">\n        <label>Filter by year</label>\n        <select value={props.selected} onChange={dropdownChangeHandler}>\n          <option value=\"2022\">2022</option>\n          <option value=\"2021\">2021</option>\n          <option value=\"2020\">2020</option>\n          <option value=\"2019\">2019</option>\n        </select>\n      </div>\n    </div>\n  );\n}\n\nexport default ExpensesFilter;\n","import \"./ChartBar.css\";\n\nimport React from \"react\";\n\nfunction ChartBar(props) {\n  let barFillHeight = \"0%\";\n  if (props.maxValue > 0) {\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\n  }\n\n  return (\n    <div className=\"chart-bar\">\n      <div className=\"chart-bar__inner\">\n        <div className=\"chart-bar__fill\" style={{height : barFillHeight}}></div>\n      </div>\n      <div className=\"chart-bar__label\">{props.label}</div>\n    </div>\n  );\n}\n\nexport default ChartBar;\n\n// style prop requires a js object. Use camelCase NOT hypen","import ChartBar from \"./ChartBar\";\nimport \"./Chart.css\";\n\nfunction Chart(props) {\n  const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value)\n  // Transform dataPoint object to a number (map method will return an array comprising only of numbers). 12 months therefore 12 values.\n  const totalMaximum = Math.max(...dataPointValues)\n  // Find the biggest value across all the months. (The max value to be represented in the chart). Max method requires list of arguments instead of array so use spread operator to pull all array elements and add them as standalone arguments to max method. maxmethod now receives 12 arguments (12 expense values) from array pulled from spread operator\n  return (\n    <div className=\"chart\">\n      {props.dataPoints.map((dataPoint) => (\n        <ChartBar\n          key={dataPoint.label}\n          value={dataPoint.value}\n          maxValue={totalMaximum}\n          label={dataPoint.label}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Chart;\n","import Chart from \"../Chart/Chart\";\n\nfunction ExpensesChart(props) {\n  const chartDataPoints = [\n    { label: \"Jan\", value: 0 },\n    { label: \"Feb\", value: 0 },\n    { label: \"Mar\", value: 0 },\n    { label: \"Apr\", value: 0 },\n    { label: \"May\", value: 0 },\n    { label: \"Jun\", value: 0 },\n    { label: \"Jul\", value: 0 },\n    { label: \"Aug\", value: 0 },\n    { label: \"Sep\", value: 0 },\n    { label: \"Oct\", value: 0 },\n    { label: \"Nov\", value: 0 },\n    { label: \"Dec\", value: 0 },\n  ];\n\n  for (const expense of props.expenses) {\n    const expenseMonth = expense.date.getMonth(); // starting at 0 => January => 0\n    // Get each month for each expense and update value of appropriate datapoint by expense amount\n    chartDataPoints[expenseMonth].value += expense.amount;\n    // increase value of a month by expense amount\n  }\n  return <Chart dataPoints={chartDataPoints} />;\n}\n\nexport default ExpensesChart;\n","import { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport \"./Expenses.css\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport \"./ExpensesList.css\"\nimport ExpensesChart from \"./ExpensesChart\";\n\nfunction Expenses(props) {\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\n\n  function filterChangeHandler(selectedYear) {\n    setFilteredYear(selectedYear);\n  }\n\n  const filteredExpenses = props.allexpenses.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear\n  });\n\n\n\n  return (\n    <div>\n      <Card className=\"expenses expenses-list__fallback\">\n        <ExpensesFilter selected={filteredYear} onChangeFilter={filterChangeHandler} />\n        <ExpensesChart expenses={filteredExpenses} />\n        {filteredExpenses.length === 0 && <p>No expenses found</p>}\n        {filteredExpenses.length > 0 && filteredExpenses.map(expense => <ExpenseItem key={expense.id} title={expense.title} amount={expense.amount} date={expense.date} />) }\n      </Card>\n    </div>\n  );\n}\nexport default Expenses;\n\n// Map method cycles through every item in our expenses array of objects and transforms each item into ExpenseItem jsx elements in a new array.\n// Key prop is a unique value- helps react identify the individual items to update and render lists correctly\n// Content after && is rendered if statement before is true","import \"./NewExpense.css\";\nimport { useState } from \"react\";\n\nfunction NewExpense(props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  // useState to save form value into a variable if component reloads\n  // initial state of input should be empty string as nothing is entered. Value of changeevent inputs are ALWAYS STRING\n\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: \"\",\n  //   enteredAmount: \"\",\n  //   enteredDate: \"\",\n  // });\n  // Alternate state method- All 3 states related to store user input form- can use 1 State which stores others into a State Object. HOWEVER this 1 combined state WILL result in depending on an old snapshot of state when updating current state\n\n  function titleChangeHandler(event) {\n    setEnteredTitle(event.target.value);\n    // setUserInput({\n    //   ...userInput,\n    //   enteredTitle: event.target.value,\n    // });\n    // Above technique may not obtain latest state snapshot as react schedules state updates and if lots of states are scheduled it may obtain an older state than the latest when copying in old states via spread oeprator in the combined state approach\n\n    // setUserInput(function (prevState) {\n    //   return { ...prevState, enteredTitle: event.target.value };\n    // });\n    // Using prevState will guarantee using using the most recent state snapshot when updating current state. USE THIS when updating state thats dependent on previous state\n  }\n  // spread operator extracts and retains the other saved values in userInput i.e enteredAmount and enteredDate\n  // Spread operator first as it saves all 3 userInput state object values and just overwrites the enteredTitle\n\n  function amountChangeHandler(event) {\n    setEnteredAmount(event.target.value);\n    // setUserInput({\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // });\n  }\n\n  function dateChangeHandler(event) {\n    setEnteredDate(event.target.value);\n    // setUserInput({\n    //   ...userInput,\n    //   enteredDate: event.target.value,\n    // });\n  }\n\n  function submitHandler(event) {\n    event.preventDefault();\n    // Prevent browser request being sent to server hosting the webpage (dev server in this case) resulting in page reloading. We want to manually handle the submission with JS to collect the data\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate),\n      id: Math.random().toString(),\n    };\n    setIsEditing(false);\n\n    console.log(expenseData);\n    props.onAddExpense(expenseData);\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  }\n  // When form is submitted it will gather the 3 current state user-input values and combine them into 1 Object expenseData.\n  // Resetting entered input fields to an empty string via 2-way binding\n\n  function startEditingHandler() {\n    setIsEditing(true);\n  }\n\n  function stopEditingHandler() {\n    setIsEditing(false);\n  }\n\n  return (\n    <div className=\"new-expense\">\n      {!isEditing && <button onClick={startEditingHandler}>Add New Expense</button>}\n      {isEditing && <form onSubmit={submitHandler} onCancel={stopEditingHandler}>\n        <div className=\"new-expense__controls\">\n          {/* Form Input Controls */}\n          <div className=\"new-expense__control\">\n            <label htmlFor=\"\">Title</label>\n            <input\n              type=\"text\"\n              value={enteredTitle}\n              onChange={titleChangeHandler}\n            />\n          </div>\n\n          <div className=\"new-expense__control\">\n            <label htmlFor=\"\">Amount</label>\n            <input\n              type=\"number\"\n              min=\"0.01\"\n              step=\"0.01\"\n              value={enteredAmount}\n              onChange={amountChangeHandler}\n            />\n          </div>\n\n          <div className=\"new-expense__control\">\n            <label htmlFor=\"\">Date</label>\n            <input\n              type=\"date\"\n              min=\"2019-01-01\"\n              max=\"2022-12-31\"\n              value={enteredDate}\n              onChange={dateChangeHandler}\n            />\n          </div>\n        </div>\n        <div className=\"new-expense__actions\">\n          <button type=\"button\" onClick={stopEditingHandler}>Cancel</button>\n          <button type=\"submit\">Add Expense</button>\n        </div>\n      </form>}\n    </div>\n  );\n}\nexport default NewExpense;\n\n// Dont use onClick event listener on submit button- put event listener on the form element (default behaviour in browser/forms whereby upon submit button click the form element will emit a submit event)\n\n// Use Handler word in event-listener function as a convention to describe a function executing upon user event\n// onChange event listener listens for input field value change. Useful for React forms. onInput and onChange both listen for keystrokes but onChange is universal for all input types including dropdowns.\n\n// An event-listener function (handler) returns an Event object which contains useful metadata- target input’s id, name, and current value.\n// We can access the target input’s value inside of the handleChange by accessing e.target.value. Therefore, to log the name of the input field, we can log e.target.name.\n","import Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nimport { useState } from \"react\";\n\n// function App() {\nconst Dummy_Expenses = [\n  {\n    id: \"e1\",\n    title: \"Desktop PC\",\n    amount: 1560,\n    date: new Date(2020, 7, 14),\n  },\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\nfunction App() {\n  const [expenses, setExpenses] = useState(Dummy_Expenses);\n  function addExpenseHandler(expense) {\n    setExpenses((prevExpenses) => {\n      return [expense, ...prevExpenses];\n    });\n  }\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses allexpenses={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}